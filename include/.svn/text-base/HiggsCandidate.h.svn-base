#ifndef HIGGSCANDIDATE_H
#define HIGGSCANDIDATE_H

#include "Jet.h"

class HiggsCandidate : public Particle
{
	public:
		HiggsCandidate(const Jet& jet);
		HiggsCandidate(const Jet& jet1, const Jet& jet2);
		HiggsCandidate(const Jet& fatjet, const Jet& subjet1, const Jet& subjet2);
//		HiggsCandidate& 			operator=(const HiggsCandidate&);
		float 			deltaR() const { return m_dR; };
		//float getDeltaR(const TString&) const ;
		const Jet*		getJet(int jetNum) const;
		int 			getJetIndex(int jetNum) const ;
		const TString& 	label() const { return m_label; };
		int				truthHiggsId() const { return m_truthHiggsId; }
		int 			category() const {return m_category;}
		void    		setLabel(const TString& label) { m_label = label;};
		void			setTruthHiggsId(const int& truthHiggsId) { m_truthHiggsId = truthHiggsId; }

		//float getValue(Double_t (ROOT::Math::PtEtaPhiEVector::*floatFunc)() const, const TString& variation) const;
	protected:
		const Jet *m_jet1, *m_jet2, *m_fatjet;
		float m_dR;
		TString m_label;
		int m_category, m_truthHiggsId;
		//std::map<TString, float> m_varHiggsCandidate_dR;
};
#endif
